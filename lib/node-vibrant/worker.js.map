{"version":3,"file":"worker.js","sources":["../src/colors.ts","../src/util.ts","../src/color.ts","../src/quantizer/vbox.ts","../src/quantizer/pqueue.ts","../src/quantizer/mmcq.ts","../src/quantizer/worker/worker.ts"],"sourcesContent":["import { Vec3 } from './color';\r\n\r\nexport function hexToRgb(hex: string): Vec3 {\r\n    let m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\r\n    return m === null\r\n        ? null\r\n        : <Vec3>[m[1], m[2], m[3]].map(s => parseInt(s, 16));\r\n}\r\n\r\nexport function rgbToHsl(r: number, g: number, b: number): Vec3 {\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n    let max = Math.max(r, g, b);\r\n    let min = Math.min(r, g, b);\r\n    let h: number;\r\n    let s: number;\r\n    let l = (max + min) / 2;\r\n    if (max === min) {\r\n        h = s = 0;\r\n    } else {\r\n        let d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n\r\n        h /= 6;\r\n    }\r\n    return [h, s, l];\r\n}\r\n","import { Vec3 } from './color'\nimport { hexToRgb } from './colors'\n\nexport const DELTAE94_DIFF_STATUS = {\n    NA: 0,\n    PERFECT: 1,\n    CLOSE: 2,\n    GOOD: 10,\n    SIMILAR: 50\n}\n\nexport const SIGBITS = 5\nexport const RSHIFT = 8 - SIGBITS\n\nexport interface IndexedObject {\n    [key: string]: any\n}\n\nexport interface DeferredPromise<R> {\n    resolve: (thenableOrResult: R | PromiseLike<R>) => void\n    reject: (error: any) => void\n    promise: Promise<R>\n}\n\nexport function defer<R>(): DeferredPromise<R> {\n    let resolve: (thenableOrResult: R | PromiseLike<R>) => void\n    let reject: (error: any) => void\n    let promise = new Promise<R>((_resolve, _reject) => {\n        resolve = _resolve\n        reject = _reject\n    })\n    return { resolve, reject, promise }\n}\nexport function rgbToHex(r: number, g: number, b: number): string {\n    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1, 7)\n}\n\nexport function hslToRgb(h: number, s: number, l: number): Vec3 {\n    let r: number\n    let g: number\n    let b: number\n\n    function hue2rgb(p: number, q: number, t: number): number {\n        if (t < 0) t += 1\n        if (t > 1) t -= 1\n        if (t < 1 / 6) return p + (q - p) * 6 * t\n        if (t < 1 / 2) return q\n        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n        return p\n    }\n\n    if (s === 0) {\n        r = g = b = l\n    } else {\n        let q = l < 0.5 ? l * (1 + s) : l + s - (l * s)\n        let p = 2 * l - q\n        r = hue2rgb(p, q, h + 1 / 3)\n        g = hue2rgb(p, q, h)\n        b = hue2rgb(p, q, h - (1 / 3))\n    }\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ]\n}\n\nexport function rgbToXyz(r: number, g: number, b: number): Vec3 {\n    r /= 255\n    g /= 255\n    b /= 255\n    r = r > 0.04045 ? Math.pow((r + 0.005) / 1.055, 2.4) : r / 12.92\n    g = g > 0.04045 ? Math.pow((g + 0.005) / 1.055, 2.4) : g / 12.92\n    b = b > 0.04045 ? Math.pow((b + 0.005) / 1.055, 2.4) : b / 12.92\n\n    r *= 100\n    g *= 100\n    b *= 100\n\n    let x = r * 0.4124 + g * 0.3576 + b * 0.1805\n    let y = r * 0.2126 + g * 0.7152 + b * 0.0722\n    let z = r * 0.0193 + g * 0.1192 + b * 0.9505\n\n    return [x, y, z]\n}\n\nexport function xyzToCIELab(x: number, y: number, z: number): Vec3 {\n    let REF_X = 95.047\n    let REF_Y = 100\n    let REF_Z = 108.883\n\n    x /= REF_X\n    y /= REF_Y\n    z /= REF_Z\n\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116\n\n    let L = 116 * y - 16\n    let a = 500 * (x - y)\n    let b = 200 * (y - z)\n\n    return [L, a, b]\n}\n\nexport function rgbToCIELab(r: number, g: number, b: number): Vec3 {\n    let [x, y, z] = rgbToXyz(r, g, b)\n    return xyzToCIELab(x, y, z)\n}\n\nexport function deltaE94(lab1: Vec3, lab2: Vec3): number {\n    let WEIGHT_L = 1\n    let WEIGHT_C = 1\n    let WEIGHT_H = 1\n\n    let [L1, a1, b1] = lab1\n    let [L2, a2, b2] = lab2\n    let dL = L1 - L2\n    let da = a1 - a2\n    let db = b1 - b2\n\n    let xC1 = Math.sqrt(a1 * a1 + b1 * b1)\n    let xC2 = Math.sqrt(a2 * a2 + b2 * b2)\n\n    let xDL = L2 - L1\n    let xDC = xC2 - xC1\n    let xDE = Math.sqrt(dL * dL + da * da + db * db)\n\n    let xDH = (Math.sqrt(xDE) > Math.sqrt(Math.abs(xDL)) + Math.sqrt(Math.abs(xDC)))\n        ? Math.sqrt(xDE * xDE - xDL * xDL - xDC * xDC)\n        : 0\n\n    let xSC = 1 + 0.045 * xC1\n    let xSH = 1 + 0.015 * xC1\n\n    xDL /= WEIGHT_L\n    xDC /= WEIGHT_C * xSC\n    xDH /= WEIGHT_H * xSH\n\n    return Math.sqrt(xDL * xDL + xDC * xDC + xDH * xDH)\n}\n\nexport function rgbDiff(rgb1: Vec3, rgb2: Vec3): number {\n    let lab1 = rgbToCIELab.apply(undefined, rgb1)\n    let lab2 = rgbToCIELab.apply(undefined, rgb2)\n    return deltaE94(lab1, lab2)\n}\n\nexport function hexDiff(hex1: string, hex2: string): number {\n    let rgb1 = hexToRgb(hex1)\n    let rgb2 = hexToRgb(hex2)\n\n    return rgbDiff(rgb1, rgb2)\n}\n\nexport function getColorDiffStatus(d: number): string {\n    if (d < DELTAE94_DIFF_STATUS.NA)\n        return 'N/A'\n    // Not perceptible by human eyes\n    if (d <= DELTAE94_DIFF_STATUS.PERFECT)\n        return 'Perfect'\n    // Perceptible through close observation\n    if (d <= DELTAE94_DIFF_STATUS.CLOSE)\n        return 'Close'\n    // Perceptible at a glance\n    if (d <= DELTAE94_DIFF_STATUS.GOOD)\n        return 'Good'\n    // Colors are more similar than opposite\n    if (d < DELTAE94_DIFF_STATUS.SIMILAR)\n        return 'Similar'\n    return 'Wrong'\n\n}\n\nexport function getColorIndex(r: number, g: number, b: number): number {\n    return (r << (2 * SIGBITS)) + (g << SIGBITS) + b\n}\n\nexport { hexToRgb, rgbToHsl } from './colors';\n","import { Filter } from './typing'\nimport { rgbToHsl, rgbToHex } from './util'\n\nexport interface Vec3 extends Array<number> {\n    0: number,\n    1: number,\n    2: number\n}\n\nexport interface Palette {\n    Vibrant?: Swatch,\n    Muted?: Swatch,\n    DarkVibrant?: Swatch,\n    DarkMuted?: Swatch,\n    LightVibrant?: Swatch,\n    LightMuted?: Swatch\n    [name: string]: Swatch\n}\n\n\nexport class Swatch {\n    static applyFilter(colors: Swatch[], f: Filter): Swatch[] {\n        return typeof f === 'function'\n            ? colors.filter(({ r, g, b }) => f(r, g, b, 255))\n            : colors\n    }\n    private _hsl: Vec3\n    private _rgb: Vec3\n    private _yiq: number\n    private _population: number\n    private _hex: string\n    get r() { return this._rgb[0] }\n    get g() { return this._rgb[1] }\n    get b() { return this._rgb[2] }\n    getRgb(): Vec3 { return this._rgb }\n    getHsl(): Vec3 {\n        if (!this._hsl) {\n            let [r, g, b] = this._rgb\n            this._hsl = rgbToHsl(r, g, b)\n        }\n        return this._hsl\n    }\n    getPopulation(): number { return this._population }\n\n    getHex(): string {\n        if (!this._hex) {\n            let [r, g, b] = this._rgb\n            this._hex = rgbToHex(r, g, b)\n        }\n        return this._hex\n    }\n\n    private getYiq(): number {\n        if (!this._yiq) {\n            let rgb = this._rgb\n            this._yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000\n        }\n        return this._yiq\n    }\n\n    getTitleTextColor(): string {\n        return this.getYiq() < 200 ? '#fff' : '#000'\n    }\n\n    getBodyTextColor(): string {\n        return this.getYiq() < 150 ? '#fff' : '#000'\n    }\n\n    constructor(rgb: Vec3, population: number) {\n        this._rgb = rgb\n        this._population = population\n    }\n}\n","import { Vec3 } from '../color'\nimport { Pixels, Filter } from '../typing'\nimport { getColorIndex, SIGBITS, RSHIFT } from '../util'\n\nexport interface Dimension {\n    r1: number\n    r2: number\n    g1: number\n    g2: number\n    b1: number\n    b2: number\n    [d: string]: number\n}\n\nexport default class VBox {\n    static build(pixels: Pixels, shouldIgnore?: Filter): VBox {\n        let hn = 1 << (3 * SIGBITS)\n        let hist = new Uint32Array(hn)\n        let rmax: number\n        let rmin: number\n        let gmax: number\n        let gmin: number\n        let bmax: number\n        let bmin: number\n        let r: number\n        let g: number\n        let b: number\n        let a: number\n        rmax = gmax = bmax = 0\n        rmin = gmin = bmin = Number.MAX_VALUE\n        let n = pixels.length / 4\n        let i = 0\n\n        while (i < n) {\n\n            let offset = i * 4\n            i++\n            r = pixels[offset + 0]\n            g = pixels[offset + 1]\n            b = pixels[offset + 2]\n            a = pixels[offset + 3]\n\n            // Ignored pixels' alpha is marked as 0 in filtering stage\n            if (a === 0) continue\n\n            r = r >> RSHIFT\n            g = g >> RSHIFT\n            b = b >> RSHIFT\n\n\n            let index = getColorIndex(r, g, b)\n            hist[index] += 1\n\n            if (r > rmax) rmax = r\n            if (r < rmin) rmin = r\n            if (g > gmax) gmax = g\n            if (g < gmin) gmin = g\n            if (b > bmax) bmax = b\n            if (b < bmin) bmin = b\n\n        }\n        return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, hist)\n    }\n\n    dimension: Dimension\n    hist: Uint32Array\n\n    private _volume = -1\n    private _avg: Vec3\n    private _count = -1\n\n    constructor(\n        r1: number, r2: number,\n        g1: number, g2: number,\n        b1: number, b2: number,\n        hist: Uint32Array\n    ) {\n        this.dimension = { r1, r2, g1, g2, b1, b2 }\n\n        this.hist = hist\n    }\n\n    invalidate(): void {\n        this._volume = this._count = -1\n        this._avg = null\n    }\n\n    volume(): number {\n        if (this._volume < 0) {\n            let { r1, r2, g1, g2, b1, b2 } = this.dimension\n            this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1)\n        }\n        return this._volume\n    }\n\n    count(): number {\n        if (this._count < 0) {\n            let { hist } = this\n            let { r1, r2, g1, g2, b1, b2 } = this.dimension\n            let c = 0\n\n            for (let r = r1; r <= r2; r++) {\n                for (let g = g1; g <= g2; g++) {\n                    for (let b = b1; b <= b2; b++) {\n                        let index = getColorIndex(r, g, b)\n                        c += hist[index]\n                    }\n                }\n            }\n            this._count = c\n        }\n        return this._count\n    }\n\n    clone(): VBox {\n        let { hist } = this\n        let { r1, r2, g1, g2, b1, b2 } = this.dimension\n        return new VBox(r1, r2, g1, g2, b1, b2, hist)\n    }\n\n    avg(): Vec3 {\n        if (!this._avg) {\n            let { hist } = this\n            let { r1, r2, g1, g2, b1, b2 } = this.dimension\n            let ntot = 0\n            let mult = 1 << (8 - SIGBITS)\n            let rsum: number\n            let gsum: number\n            let bsum: number\n            rsum = gsum = bsum = 0\n\n            for (let r = r1; r <= r2; r++) {\n                for (let g = g1; g <= g2; g++) {\n                    for (let b = b1; b <= b2; b++) {\n                        var index = getColorIndex(r, g, b);\n                        var h = hist[index];\n                        ntot += h;\n                        rsum += (h * (r + 0.5) * mult);\n                        gsum += (h * (g + 0.5) * mult);\n                        bsum += (h * (b + 0.5) * mult);\n                    }\n                }\n            }\n            if (ntot) {\n                this._avg = [\n                    ~~(rsum / ntot),\n                    ~~(gsum / ntot),\n                    ~~(bsum / ntot)\n                ]\n            } else {\n                this._avg = [\n                    ~~(mult * (r1 + r2 + 1) / 2),\n                    ~~(mult * (g1 + g2 + 1) / 2),\n                    ~~(mult * (b1 + b2 + 1) / 2),\n                ]\n            }\n\n        }\n        return this._avg\n    }\n\n    contains(rgb: Vec3): boolean {\n        let [r, g, b] = rgb\n        let { r1, r2, g1, g2, b1, b2 } = this.dimension\n        r >>= RSHIFT\n        g >>= RSHIFT\n        b >>= RSHIFT\n\n        return r >= r1 && r <= r2\n            && g >= g1 && g <= g2\n            && b >= b1 && b <= b2\n    }\n\n    split(): VBox[] {\n        let { hist } = this\n        let { r1, r2, g1, g2, b1, b2 } = this.dimension\n        let count = this.count()\n        if (!count) return []\n        if (count === 1) return [this.clone()]\n        let rw = r2 - r1 + 1\n        let gw = g2 - g1 + 1\n        let bw = b2 - b1 + 1\n\n        let maxw = Math.max(rw, gw, bw)\n        let accSum: Uint32Array = null\n        let sum: number\n        let total: number\n        sum = total = 0\n\n        let maxd: 'r' | 'g' | 'b' = null\n\n        if (maxw === rw) {\n            maxd = 'r'\n            accSum = new Uint32Array(r2 + 1)\n            for (let r = r1; r <= r2; r++) {\n                sum = 0\n                for (let g = g1; g <= g2; g++) {\n                    for (let b = b1; b <= b2; b++) {\n                        let index = getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[r] = total;\n            }\n        } else if (maxw === gw) {\n            maxd = 'g'\n            accSum = new Uint32Array(g2 + 1)\n            for (let g = g1; g <= g2; g++) {\n                sum = 0\n                for (let r = r1; r <= r2; r++) {\n                    for (let b = b1; b <= b2; b++) {\n                        let index = getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[g] = total;\n            }\n        } else {\n            maxd = 'b'\n            accSum = new Uint32Array(b2 + 1)\n            for (let b = b1; b <= b2; b++) {\n                sum = 0\n                for (let r = r1; r <= r2; r++) {\n                    for (let g = g1; g <= g2; g++) {\n                        let index = getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[b] = total;\n            }\n        }\n\n        let splitPoint = -1\n        let reverseSum = new Uint32Array(accSum.length)\n        for (let i = 0; i < accSum.length; i++) {\n            let d = accSum[i];\n            if (splitPoint < 0 && d > total / 2) splitPoint = i\n            reverseSum[i] = total - d\n        }\n\n        let vbox = this\n\n        function doCut(d: string): VBox[] {\n            let dim1 = d + '1'\n            let dim2 = d + '2'\n            let d1 = vbox.dimension[dim1]\n            let d2 = vbox.dimension[dim2]\n            let vbox1 = vbox.clone()\n            let vbox2 = vbox.clone()\n            let left = splitPoint - d1\n            let right = d2 - splitPoint\n            if (left <= right) {\n                d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2))\n                d2 = Math.max(0, d2)\n            }\n            else {\n                d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2))\n                d2 = Math.min(vbox.dimension[dim2], d2)\n            }\n\n\n            while (!accSum[d2]) d2++\n\n\n            let c2 = reverseSum[d2]\n            while (!c2 && accSum[d2 - 1]) c2 = reverseSum[--d2]\n\n            vbox1.dimension[dim2] = d2\n            vbox2.dimension[dim1] = d2 + 1\n\n            return [vbox1, vbox2]\n        }\n\n        return doCut(maxd)\n    }\n\n}","export interface PQueueComparator<T> {\n    (a: T, b: T): number\n}\n\nexport default class PQueue<T> {\n    contents: T[]\n    private _sorted: boolean\n    private _comparator: PQueueComparator<T>\n    private _sort(): void {\n        if (!this._sorted) {\n            this.contents.sort(this._comparator)\n            this._sorted = true\n        }\n    }\n\n    constructor(comparator: PQueueComparator<T>) {\n        this._comparator = comparator\n        this.contents = []\n        this._sorted = false\n    }\n    \n    push(item: T): void {\n        this.contents.push(item)\n        this._sorted = false\n    }\n    \n    peek(index?: number): T {\n        this._sort()\n        index = typeof index === 'number' ? index : this.contents.length  - 1\n        return this.contents[index]\n    }\n    \n    pop(): T {\n        this._sort()\n        return this.contents.pop()\n    }\n    \n    size(): number {\n        return this.contents.length\n    }\n    \n    map<U>(mapper: (item: T, index: number) => any): U[] {\n        this._sort()\n        return this.contents.map(mapper)\n    }\n}","import {\n    Quantizer,\n    Filter,\n    Pixels,\n    ComputedOptions\n} from '../typing'\nimport { Swatch } from '../color'\nimport VBox from './vbox'\nimport PQueue from './pqueue'\n\nconst fractByPopulations = 0.75\n\nfunction _splitBoxes(pq: PQueue<VBox>, target: number): void {\n    let lastSize = pq.size()\n    while (pq.size() < target) {\n        let vbox = pq.pop()\n\n        if (vbox && vbox.count() > 0) {\n            let [vbox1, vbox2] = vbox.split()\n\n            pq.push(vbox1)\n            if (vbox2 && vbox2.count() > 0) pq.push(vbox2)\n\n            // No more new boxes, converged\n            if (pq.size() === lastSize) {\n                break\n            } else {\n                lastSize = pq.size()\n            }\n        } else {\n            break\n        }\n    }\n}\n\nconst MMCQ = (pixels: Pixels, opts: ComputedOptions): Array<Swatch> => {\n    if (pixels.length === 0 || opts.colorCount < 2 || opts.colorCount > 256) {\n        throw new Error('Wrong MMCQ parameters')\n    }\n\n    let vbox = VBox.build(pixels)\n    let hist = vbox.hist\n    let colorCount = Object.keys(hist).length\n    let pq = new PQueue<VBox>((a, b) => a.count() - b.count())\n\n    pq.push(vbox)\n\n    // first set of colors, sorted by population\n    _splitBoxes(pq, fractByPopulations * opts.colorCount)\n\n    // Re-order\n    let pq2 = new PQueue<VBox>((a, b) => a.count() * a.volume() - b.count() * b.volume())\n    pq2.contents = pq.contents\n\n    // next set - generate the median cuts using the (npix * vol) sorting.\n    _splitBoxes(pq2, opts.colorCount - pq2.size())\n\n    // calculate the actual colors\n    return generateSwatches(pq2)\n}\n\nfunction generateSwatches(pq: PQueue<VBox>) {\n    let swatches: Swatch[] = []\n    while (pq.size()) {\n        let v = pq.pop()\n        let color = v.avg()\n        let [r, g, b] = color\n        swatches.push(new Swatch(color, v.count()))\n    }\n    return swatches\n}\n\nexport default MMCQ","import quantize from '../mmcq'\n\nimport {\n    WorkerRequest,\n    WorkerResponse,\n    WorkerErrorResponse\n} from './common'\n\nself.onmessage = (event) => {\n    let data: WorkerRequest = event.data\n\n    let { id, payload } = data\n\n    let response: WorkerResponse | WorkerErrorResponse\n\n    try {\n        let swatches = quantize(payload.pixels, payload.opts)\n        response = {\n            id,\n            type: 'return',\n            payload: swatches\n        }\n    }\n    catch (e) {\n        response = {\n            id,\n            type: 'error',\n            payload: (<Error>e).message\n        }\n    }\n    (<any>self).postMessage(response)\n}\n\n"],"names":["rgbToHsl","r","g","b","h","s","max","Math","min","l","d","SIGBITS","RSHIFT","rgbToHex","toString","slice","getColorIndex","Swatch","[object Object]","colors","f","filter","this","_rgb","_hsl","_population","_hex","_yiq","rgb","getYiq","population","VBox","r1","r2","g1","g2","b1","b2","hist","dimension","pixels","shouldIgnore","rmax","rmin","gmax","gmin","bmax","bmin","a","Uint32Array","Number","MAX_VALUE","n","length","i","offset","_volume","_count","_avg","c","rsum","gsum","bsum","ntot","mult","count","clone","sum","total","rw","gw","bw","maxw","accSum","maxd","splitPoint","reverseSum","vbox","dim1","dim2","d1","d2","vbox1","vbox2","left","right","c2","doCut","PQueue","comparator","_comparator","contents","_sorted","sort","item","push","index","_sort","pop","mapper","map","fractByPopulations","_splitBoxes","pq","target","lastSize","size","split","MMCQ","opts","colorCount","Error","build","Object","keys","pq2","volume","generateSwatches","swatches","v","color","avg","self","onmessage","event","response","data","id","payload","type","quantize","e","message","postMessage"],"mappings":"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"}