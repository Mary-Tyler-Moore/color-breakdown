{"version":3,"file":"db-worker.js","sources":["../../node_modules/idb/lib/idb.mjs","../../src/db-worker/db.ts","../../src/db-worker/data-uri.ts","../../src/db-worker/examples.ts","../../src/db-worker/history.ts","../../src/revoke-object-url.ts","../../src/db-worker/handle-message.ts","../../src/db-worker/index.ts"],"sourcesContent":["function toArray(arr) {\n  return Array.prototype.slice.call(arr);\n}\n\nfunction promisifyRequest(request) {\n  return new Promise(function(resolve, reject) {\n    request.onsuccess = function() {\n      resolve(request.result);\n    };\n\n    request.onerror = function() {\n      reject(request.error);\n    };\n  });\n}\n\nfunction promisifyRequestCall(obj, method, args) {\n  var request;\n  var p = new Promise(function(resolve, reject) {\n    request = obj[method].apply(obj, args);\n    promisifyRequest(request).then(resolve, reject);\n  });\n\n  p.request = request;\n  return p;\n}\n\nfunction promisifyCursorRequestCall(obj, method, args) {\n  var p = promisifyRequestCall(obj, method, args);\n  return p.then(function(value) {\n    if (!value) return;\n    return new Cursor(value, p.request);\n  });\n}\n\nfunction proxyProperties(ProxyClass, targetProp, properties) {\n  properties.forEach(function(prop) {\n    Object.defineProperty(ProxyClass.prototype, prop, {\n      get: function() {\n        return this[targetProp][prop];\n      },\n      set: function(val) {\n        this[targetProp][prop] = val;\n      }\n    });\n  });\n}\n\nfunction proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return promisifyRequestCall(this[targetProp], prop, arguments);\n    };\n  });\n}\n\nfunction proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return this[targetProp][prop].apply(this[targetProp], arguments);\n    };\n  });\n}\n\nfunction proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n    };\n  });\n}\n\nfunction Index(index) {\n  this._index = index;\n}\n\nproxyProperties(Index, '_index', [\n  'name',\n  'keyPath',\n  'multiEntry',\n  'unique'\n]);\n\nproxyRequestMethods(Index, '_index', IDBIndex, [\n  'get',\n  'getKey',\n  'getAll',\n  'getAllKeys',\n  'count'\n]);\n\nproxyCursorRequestMethods(Index, '_index', IDBIndex, [\n  'openCursor',\n  'openKeyCursor'\n]);\n\nfunction Cursor(cursor, request) {\n  this._cursor = cursor;\n  this._request = request;\n}\n\nproxyProperties(Cursor, '_cursor', [\n  'direction',\n  'key',\n  'primaryKey',\n  'value'\n]);\n\nproxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n  'update',\n  'delete'\n]);\n\n// proxy 'next' methods\n['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n  if (!(methodName in IDBCursor.prototype)) return;\n  Cursor.prototype[methodName] = function() {\n    var cursor = this;\n    var args = arguments;\n    return Promise.resolve().then(function() {\n      cursor._cursor[methodName].apply(cursor._cursor, args);\n      return promisifyRequest(cursor._request).then(function(value) {\n        if (!value) return;\n        return new Cursor(value, cursor._request);\n      });\n    });\n  };\n});\n\nfunction ObjectStore(store) {\n  this._store = store;\n}\n\nObjectStore.prototype.createIndex = function() {\n  return new Index(this._store.createIndex.apply(this._store, arguments));\n};\n\nObjectStore.prototype.index = function() {\n  return new Index(this._store.index.apply(this._store, arguments));\n};\n\nproxyProperties(ObjectStore, '_store', [\n  'name',\n  'keyPath',\n  'indexNames',\n  'autoIncrement'\n]);\n\nproxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n  'put',\n  'add',\n  'delete',\n  'clear',\n  'get',\n  'getAll',\n  'getKey',\n  'getAllKeys',\n  'count'\n]);\n\nproxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n  'openCursor',\n  'openKeyCursor'\n]);\n\nproxyMethods(ObjectStore, '_store', IDBObjectStore, [\n  'deleteIndex'\n]);\n\nfunction Transaction(idbTransaction) {\n  this._tx = idbTransaction;\n  this.complete = new Promise(function(resolve, reject) {\n    idbTransaction.oncomplete = function() {\n      resolve();\n    };\n    idbTransaction.onerror = function() {\n      reject(idbTransaction.error);\n    };\n    idbTransaction.onabort = function() {\n      reject(idbTransaction.error);\n    };\n  });\n}\n\nTransaction.prototype.objectStore = function() {\n  return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n};\n\nproxyProperties(Transaction, '_tx', [\n  'objectStoreNames',\n  'mode'\n]);\n\nproxyMethods(Transaction, '_tx', IDBTransaction, [\n  'abort'\n]);\n\nfunction UpgradeDB(db, oldVersion, transaction) {\n  this._db = db;\n  this.oldVersion = oldVersion;\n  this.transaction = new Transaction(transaction);\n}\n\nUpgradeDB.prototype.createObjectStore = function() {\n  return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n};\n\nproxyProperties(UpgradeDB, '_db', [\n  'name',\n  'version',\n  'objectStoreNames'\n]);\n\nproxyMethods(UpgradeDB, '_db', IDBDatabase, [\n  'deleteObjectStore',\n  'close'\n]);\n\nfunction DB(db) {\n  this._db = db;\n}\n\nDB.prototype.transaction = function() {\n  return new Transaction(this._db.transaction.apply(this._db, arguments));\n};\n\nproxyProperties(DB, '_db', [\n  'name',\n  'version',\n  'objectStoreNames'\n]);\n\nproxyMethods(DB, '_db', IDBDatabase, [\n  'close'\n]);\n\n// Add cursor iterators\n// TODO: remove this once browsers do the right thing with promises\n['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n  [ObjectStore, Index].forEach(function(Constructor) {\n    // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n    if (!(funcName in Constructor.prototype)) return;\n\n    Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n      var args = toArray(arguments);\n      var callback = args[args.length - 1];\n      var nativeObject = this._store || this._index;\n      var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n      request.onsuccess = function() {\n        callback(request.result);\n      };\n    };\n  });\n});\n\n// polyfill getAll\n[Index, ObjectStore].forEach(function(Constructor) {\n  if (Constructor.prototype.getAll) return;\n  Constructor.prototype.getAll = function(query, count) {\n    var instance = this;\n    var items = [];\n\n    return new Promise(function(resolve) {\n      instance.iterateCursor(query, function(cursor) {\n        if (!cursor) {\n          resolve(items);\n          return;\n        }\n        items.push(cursor.value);\n\n        if (count !== undefined && items.length == count) {\n          resolve(items);\n          return;\n        }\n        cursor.continue();\n      });\n    });\n  };\n});\n\nexport function openDb(name, version, upgradeCallback) {\n  var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n  var request = p.request;\n\n  if (request) {\n    request.onupgradeneeded = function(event) {\n      if (upgradeCallback) {\n        upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n      }\n    };\n  }\n\n  return p.then(function(db) {\n    return new DB(db);\n  });\n}\n\nexport function deleteDb(name) {\n  return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n}\n","import { openDb } from 'idb';\nimport { PaletteEntry, HistoryEntry } from '../entry';\nimport { dataUriToBlob } from './data-uri';\n\ninterface ExampleEntry {\n    id: number;\n    hidden: true;\n}\n\nconst dbPromise = openDb('history-store', 2, upgradeDB => {\n    switch (upgradeDB.oldVersion) {\n        case 0:\n            upgradeDB.createObjectStore<HistoryEntry, number>('history', {\n                keyPath: 'id',\n            });\n        // fall through\n        case 1:\n            upgradeDB.createObjectStore<ExampleEntry, number>('example', {\n                keyPath: 'id',\n            });\n        // fall through\n    }\n});\n\nasync function open<T>(name: string, mode: 'readonly' | 'readwrite') {\n    const db = await dbPromise;\n    const tx = await db.transaction(name, mode);\n    const store = tx.objectStore<T, number>(name);\n\n    return { store, complete: tx.complete };\n}\n\n/**\n * Open the history object store.\n * @returns object with `store` property and inner promise `complete` which\n * resolves once the transaction is complete.\n */\nexport function openHistory(mode: 'readonly' | 'readwrite') {\n    return open<HistoryEntry>('history', mode);\n}\n\nexport function openExample(mode: 'readonly' | 'readwrite') {\n    return open<ExampleEntry>('example', mode);\n}\n\n/**\n * Open the history and example object stores.\n */\nexport async function openHistoryAndExample(mode: 'readonly' | 'readwrite') {\n    const db = await dbPromise;\n    const tx = await db.transaction(['history', 'example'], mode);\n\n    return {\n        history: tx.objectStore<HistoryEntry, number>('history'),\n        example: tx.objectStore<ExampleEntry, number>('example'),\n        complete: tx.complete,\n    };\n}\n\nexport function processEntry(entry: HistoryEntry): PaletteEntry;\nexport function processEntry(entry: null | undefined): null;\nexport function processEntry(\n    entry: HistoryEntry | null | undefined,\n): PaletteEntry | null {\n    if (entry == null) {\n        return null;\n    }\n    const timestamp = entry.id as number;\n    const imgBlob = dataUriToBlob(entry.imgSrc);\n    return {\n        timestamp,\n        imgSrc: URL.createObjectURL(imgBlob),\n        colors: entry.colors,\n        name: entry.name || new Date(timestamp).toLocaleString(),\n    };\n}\n","/**\n * Convert Data URI representing an image into a blob with the same data.\n * @see https://stackoverflow.com/questions/12168909/blob-from-dataurl\n */\nexport function dataUriToBlob(dataUri: string) {\n    const [header, data] = dataUri.split(',', 2);\n\n    // separate out the mime component\n    const mimeType = header.split(':', 2)[1].split(';', 1)[0];\n    // convert base64 to raw binary data held in a string\n    const byteString = atob(data);\n\n    // write the bytes of the string to an ArrayBuffer\n    const buffer = new ArrayBuffer(byteString.length);\n    const intBuffer = new Uint8Array(buffer); // create a view into the buffer\n    for (let i = 0; i < byteString.length; i++) {\n        intBuffer[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([buffer], { type: mimeType });\n}\n\n/**\n * Convert blob to data uri\n * @throws DOMException if error when reading\n */\nexport function blobToDataUri(blob: Blob) {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result as string);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(blob);\n    });\n}\n","import { PaletteEntry } from '../entry';\n\nconst white = '#FFFFFF';\nconst black = '#FFFFFF';\n\nconst example1: PaletteEntry = {\n    timestamp: 1,\n    imgSrc: 'img/demo/andrew-hughes-261571-unsplash.jpg',\n    name: 'Photo by Andrew Hughes on Unsplash',\n    colors: {\n        vibrant: { color: '#AE340E', textColor: white },\n        darkVibrant: { color: '#6C140C', textColor: white },\n        lightVibrant: { color: '#DACC9B', textColor: black },\n        muted: { color: '#9F805F', textColor: white },\n        darkMuted: { color: '#3B3945', textColor: white },\n        lightMuted: { color: '#DAD3B0', textColor: black },\n    },\n};\n\nconst example2: PaletteEntry = {\n    timestamp: 2,\n    imgSrc: 'img/demo/ever-wild-634729-unsplash.jpg',\n    name: 'Photo by ever wild on Unsplash',\n    colors: {\n        vibrant: { color: '#FBA409', textColor: black },\n        darkVibrant: { color: '#7C0404', textColor: white },\n        lightVibrant: { color: '#F9A250', textColor: black },\n        muted: { color: '#AC784C', textColor: white },\n        darkMuted: { color: '#8C6C44', textColor: white },\n        lightMuted: { color: '#BC987A', textColor: black },\n    },\n};\n\nconst example3: PaletteEntry = {\n    timestamp: 3,\n    imgSrc: 'img/demo/will-turner-1244879-unsplash.jpg',\n    name: 'Photo by Will Turner on Unsplash',\n    colors: {\n        vibrant: { color: '#1E8EE0', textColor: white },\n        darkVibrant: { color: '#061C2C', textColor: white },\n        lightVibrant: { color: '#8AC4EF', textColor: black },\n        muted: { color: '#777C80', textColor: white },\n        darkMuted: { color: '#253D4C', textColor: white },\n        lightMuted: { color: '#BBBCC4', textColor: black },\n    },\n};\n\nexport const examples: { [id: number]: PaletteEntry } = {\n    1: example1,\n    2: example2,\n    3: example3,\n};\n","import { PaletteEntry, HistoryEntry } from '../entry';\nimport { revokeIfObjectUrl } from '../revoke-object-url';\nimport { blobToDataUri } from './data-uri';\nimport {\n    openExample,\n    openHistory,\n    openHistoryAndExample,\n    processEntry,\n} from './db';\nimport { examples } from './examples';\n\n/**\n * Loads a single history item for the main palette viewer\n */\nexport async function loadItemFromDB(\n    timestamp: number,\n): Promise<PaletteEntry | null> {\n    if (timestamp < 10) {\n        const { store } = await openExample('readonly');\n        const info = await store.get(timestamp);\n        const hidden = info != null ? info.hidden : false;\n        return hidden ? null : examples[timestamp] || null;\n    } else {\n        const { store } = await openHistory('readonly');\n        const item = await store.get(timestamp);\n        return processEntry(item);\n    }\n}\n\nexport async function openFirstItem(): Promise<PaletteEntry | null> {\n    const { history, example } = await openHistoryAndExample('readonly');\n    const historyItems = await history.getAll(undefined, 1);\n    if (historyItems.length > 0) {\n        return processEntry(historyItems[0]);\n    }\n\n    const hiddenExamples = new Set(\n        (await example.getAll())\n            .filter(item => item.hidden)\n            .map(item => item.id),\n    );\n    const visibleExample = Object.values(examples).find(\n        example => !hiddenExamples.has(example.timestamp),\n    );\n    return visibleExample || null;\n}\n\n/**\n * Delete a history item with the given timestamp\n */\nexport async function deleteItemFromDB(timestamp: number) {\n    if (timestamp < 10) {\n        const { store, complete } = await openExample('readwrite');\n        store.put({ id: timestamp, hidden: true });\n        await complete;\n    } else {\n        const { store, complete } = await openHistory('readwrite');\n        store.delete(timestamp);\n        await complete;\n    }\n}\n\n/**\n * Load the history list.\n * @param callback Called on each iteration.\n */\nexport async function loadHistoryFromDB(\n    exampleCb: (id: number) => void,\n    historyCb: (entry: PaletteEntry) => void,\n) {\n    const { history, example, complete } = await openHistoryAndExample(\n        'readonly',\n    );\n\n    example.iterateCursor(cursor => {\n        if (!cursor) return;\n        if (cursor.value.hidden) {\n            exampleCb(cursor.key as number);\n        }\n        cursor.continue();\n    });\n    history.iterateCursor(cursor => {\n        if (!cursor) return;\n        historyCb(processEntry(cursor.value));\n        cursor.continue();\n    });\n\n    await complete;\n}\n\n/**\n * Equivalent to `fetch(url).then(r => r.blob())`.\n * Firefox 64 crashes when fetching an object URL as a blob.\n * TODO: Replace once Firefox 65 is out.\n */\nfunction fetchBlob(url: string) {\n    return new Promise<Blob>((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'blob';\n        xhr.onload = function() {\n            if (this.status === 200) {\n                resolve(this.response);\n            } else {\n                reject(new Error(this.statusText));\n            }\n        };\n        xhr.onerror = function() {\n            reject(new Error(this.statusText));\n        };\n        xhr.send();\n    });\n}\n\n/**\n * Save items to the database.\n * Items may have object URLs as `imgSrc` properties, and will be processed\n * into data URIs.\n */\nexport async function saveItemsToDB(\n    items: PaletteEntry[],\n): Promise<HistoryEntry[]> {\n    // Need to process entries first due to IDB restrictions\n    const entries = await Promise.all(\n        items.map(async item => {\n            const blob = await fetchBlob(item.imgSrc);\n            const dataUri = await blobToDataUri(blob);\n            revokeIfObjectUrl(item.imgSrc);\n            return {\n                id: item.timestamp,\n                imgSrc: dataUri,\n                colors: item.colors,\n                name: item.name,\n            };\n        }),\n    );\n\n    const { store, complete } = await openHistory('readwrite');\n    entries.forEach(entry => store.put(entry));\n    await complete;\n\n    return entries;\n}\n","/**\n * Revoke a url if it is an object url.\n */\nexport function revokeIfObjectUrl(url: string) {\n    if (new URL(url).protocol === 'blob:') {\n        URL.revokeObjectURL(url);\n    }\n}\n\n/**\n * When used as an `onload` listener for an image, this function will\n * revoke the image's source object url if it is an object url.\n */\nexport function revokeObjectUrlOnLoad(evt: Event) {\n    const img = evt.target as HTMLImageElement;\n    revokeIfObjectUrl(img.src);\n}\n","import { PaletteEntry, HistoryEntry } from '../entry';\nimport { UiAction } from '../page/handle-message';\nimport { processEntry } from './db';\nimport {\n    deleteItemFromDB,\n    loadHistoryFromDB,\n    loadItemFromDB,\n    openFirstItem,\n    saveItemsToDB,\n} from './history';\n\ninterface SaveAction {\n    type: 'SAVE';\n    payload: PaletteEntry[];\n}\n\ninterface LoadAction {\n    type: 'LOAD';\n    payload: null;\n}\n\ninterface OpenAction {\n    type: 'OPEN';\n    payload: {\n        timestamp: number;\n        firstLoad: boolean;\n    };\n}\n\ninterface DeleteAction {\n    type: 'DELETE';\n    payload: {\n        timestamp: number;\n        current: boolean;\n    };\n}\n\nexport type WorkerAction = SaveAction | LoadAction | OpenAction | DeleteAction;\ntype ProcessEntry = (entry: HistoryEntry) => PaletteEntry;\n\nexport async function handleMessage(\n    action: WorkerAction,\n    postMessage: (msg: UiAction) => void,\n) {\n    console.log(action.type, action.payload);\n    try {\n        switch (action.type) {\n            case 'SAVE':\n                if (action.payload.length > 0) {\n                    const entries = await saveItemsToDB(action.payload);\n                    postMessage({\n                        type: 'DISPLAY',\n                        payload: {\n                            entry: processEntry(entries[0]),\n                            firstLoad: false,\n                            updateHash: true,\n                        },\n                    });\n                    postMessage({\n                        type: 'ADD',\n                        payload: entries.map(processEntry as ProcessEntry),\n                    });\n                }\n                return;\n            case 'LOAD':\n                await loadHistoryFromDB(\n                    id => postMessage({ type: 'REMOVE', payload: [id] }),\n                    entry => postMessage({ type: 'ADD', payload: [entry] }),\n                );\n                return;\n            case 'OPEN':\n                let entry: PaletteEntry | null = null;\n                if (!Number.isNaN(action.payload.timestamp)) {\n                    entry = await loadItemFromDB(action.payload.timestamp);\n                }\n                postMessage({\n                    type: 'DISPLAY',\n                    payload: {\n                        entry,\n                        firstLoad: action.payload.firstLoad,\n                        updateHash: false,\n                    },\n                });\n                return;\n            case 'DELETE':\n                if (!Number.isNaN(action.payload.timestamp)) {\n                    await deleteItemFromDB(action.payload.timestamp);\n                    postMessage({\n                        type: 'REMOVE',\n                        payload: [action.payload.timestamp],\n                    });\n                    if (action.payload.current) {\n                        const otherEntry = await openFirstItem();\n                        postMessage({\n                            type: 'DISPLAY',\n                            payload: {\n                                entry: otherEntry,\n                                firstLoad: false,\n                                updateHash: true,\n                            },\n                        });\n                    }\n                }\n                return;\n        }\n    } catch (err) {\n        postMessage({ type: 'ERROR', payload: String(err) });\n    }\n}\n","import { handleMessage } from './handle-message';\n\nexport declare var self: DedicatedWorkerGlobalScope;\n\nself.addEventListener('message', evt => handleMessage(evt.data, postMessage));\nhandleMessage({ type: 'LOAD', payload: null }, postMessage);\n"],"names":["promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","dbPromise","upgradeCallback","upgradeDB","keyPath","indexedDB","onupgradeneeded","event","async","open","name","mode","tx","openHistory","openExample","openHistoryAndExample","history","example","processEntry","entry","timestamp","id","imgBlob","dataUri","header","data","split","mimeType","byteString","atob","buffer","ArrayBuffer","intBuffer","Uint8Array","i","charCodeAt","Blob","type","dataUriToBlob","imgSrc","URL","createObjectURL","colors","Date","toLocaleString","white","black","examples","1","vibrant","color","textColor","darkVibrant","lightVibrant","muted","darkMuted","lightMuted","2","3","saveItemsToDB","entries","all","map","item","blob","url","xhr","XMLHttpRequest","responseType","onload","status","response","Error","statusText","send","fetchBlob","reader","FileReader","readAsDataURL","blobToDataUri","protocol","revokeObjectURL","revokeIfObjectUrl","put","handleMessage","action","postMessage","console","log","payload","firstLoad","updateHash","exampleCb","historyCb","hidden","key","loadHistoryFromDB","Number","isNaN","info","loadItemFromDB","delete","deleteItemFromDB","current","otherEntry","historyItems","hiddenExamples","Set","filter","values","find","has","openFirstItem","err","String","self","addEventListener","evt"],"mappings":"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"}