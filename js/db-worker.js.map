{"version":3,"file":"db-worker.js","sources":["../../node_modules/idb/lib/idb.js","../../node_modules/idb/lib/node.js","../../src/db-worker/db.ts","../../src/db-worker/data-uri.ts","../../src/db-worker/examples.ts","../../src/db-worker/display.ts","../../src/db-worker/history.ts","../../src/revoke-object-url.ts","../../src/db-worker/handle-message.ts","../../src/db-worker/index.ts"],"sourcesContent":["'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","if (typeof indexedDB != 'undefined') {\n  module.exports = require('./idb.js');\n}\nelse {\n  module.exports = {\n    open: function () {\n      return Promise.reject('IDB requires a browser environment');\n    },\n    delete: function () {\n      return Promise.reject('IDB requires a browser environment');\n    }\n  };\n}\n","import idb from 'idb';\nimport { ColorPalette } from '../color-interfaces';\nimport { PaletteEntry } from '../entry';\nimport { dataUriToBlob } from './data-uri';\n\nexport interface HistoryEntry {\n    readonly id: number;\n    readonly imgSrc: string;\n    readonly colors: ColorPalette;\n}\n\ninterface ExampleEntry {\n    id: number;\n    hidden: true;\n}\n\nconst dbPromise = idb.open('history-store', 1, upgradeDB => {\n    switch (upgradeDB.oldVersion) {\n        case 0:\n            upgradeDB.createObjectStore<HistoryEntry, number>('history', {\n                keyPath: 'id',\n            });\n        // fall through\n        case 1:\n            upgradeDB.createObjectStore<ExampleEntry, number>('example', {\n                keyPath: 'id',\n            });\n        // fall through\n    }\n});\n\nasync function open<T>(name: string, mode: 'readonly' | 'readwrite') {\n    const db = await dbPromise;\n    const tx = await db.transaction(name, mode);\n    const store = tx.objectStore<T, number>(name);\n\n    return { store, complete: tx.complete };\n}\n\n/**\n * Open the history object store.\n * @returns object with `store` property and inner promise `complete` which\n * resolves once the transaction is complete.\n */\nexport function openHistory(mode: 'readonly' | 'readwrite') {\n    return open<HistoryEntry>('history', mode);\n}\n\nexport function openExample(mode: 'readonly' | 'readwrite') {\n    return open<ExampleEntry>('example', mode);\n}\n\n/**\n * Open the history and example object stores.\n */\nexport async function openHistoryAndExample(mode: 'readonly' | 'readwrite') {\n    const db = await dbPromise;\n    const tx = await db.transaction(['history', 'example'], mode);\n\n    return {\n        history: tx.objectStore<HistoryEntry, number>('history'),\n        example: tx.objectStore<ExampleEntry, number>('example'),\n        complete: tx.complete,\n    };\n}\n\nexport function processEntry(entry: HistoryEntry): PaletteEntry;\nexport function processEntry(entry: null | undefined): null;\nexport function processEntry(\n    entry: HistoryEntry | null | undefined,\n): PaletteEntry | null {\n    if (entry == null) {\n        return null;\n    }\n    const imgBlob = dataUriToBlob(entry.imgSrc);\n    return {\n        timestamp: entry.id as number,\n        imgSrc: URL.createObjectURL(imgBlob),\n        colors: entry.colors,\n    };\n}\n","/**\n * Convert Data URI representing an image into a blob with the same data.\n * @see https://stackoverflow.com/questions/12168909/blob-from-dataurl\n */\nexport function dataUriToBlob(dataUri: string) {\n    const [header, data] = dataUri.split(',', 2);\n\n    // separate out the mime component\n    const mimeType = header.split(':', 2)[1].split(';', 1)[0];\n    // convert base64 to raw binary data held in a string\n    const byteString = atob(data);\n\n    // write the bytes of the string to an ArrayBuffer\n    const buffer = new ArrayBuffer(byteString.length);\n    const intBuffer = new Uint8Array(buffer); // create a view into the buffer\n    for (let i = 0; i < byteString.length; i++) {\n        intBuffer[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([buffer], { type: mimeType });\n}\n\n/**\n * Convert blob to data uri\n * @throws DOMException if error when reading\n */\nexport function blobToDataUri(blob: Blob) {\n    return new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result as string);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(blob);\n    });\n}\n","import { PaletteEntry } from '../entry';\n\nconst white = '#FFFFFF';\nconst black = '#FFFFFF';\n\nconst example1: PaletteEntry = {\n    timestamp: 1,\n    imgSrc: 'img/demo/andrew-hughes-261571-unsplash.jpg',\n    colors: {\n        vibrant: { color: '#AE340E', textColor: white },\n        darkVibrant: { color: '#6C140C', textColor: white },\n        lightVibrant: { color: '#DACC9B', textColor: black },\n        muted: { color: '#9F805F', textColor: white },\n        darkMuted: { color: '#3B3945', textColor: white },\n        lightMuted: { color: '#DAD3B0', textColor: black },\n    },\n};\n\nconst example2: PaletteEntry = {\n    timestamp: 2,\n    imgSrc: 'img/demo/ever-wild-634729-unsplash.jpg',\n    colors: {\n        vibrant: { color: '#FBA409', textColor: black },\n        darkVibrant: { color: '#7C0404', textColor: white },\n        lightVibrant: { color: '#F9A250', textColor: black },\n        muted: { color: '#AC784C', textColor: white },\n        darkMuted: { color: '#8C6C44', textColor: white },\n        lightMuted: { color: '#BC987A', textColor: black },\n    },\n};\n\nconst example3: PaletteEntry = {\n    timestamp: 3,\n    imgSrc: 'img/demo/will-turner-1244879-unsplash.jpg',\n    colors: {\n        vibrant: { color: '#1E8EE0', textColor: white },\n        darkVibrant: { color: '#061C2C', textColor: white },\n        lightVibrant: { color: '#8AC4EF', textColor: black },\n        muted: { color: '#777C80', textColor: white },\n        darkMuted: { color: '#253D4C', textColor: white },\n        lightMuted: { color: '#BBBCC4', textColor: black },\n    },\n};\n\nexport const examples: { [id: number]: PaletteEntry } = {\n    1: example1,\n    2: example2,\n    3: example3,\n};\n","import { PaletteEntry } from '../entry';\nimport {\n    openHistory,\n    processEntry,\n    openExample,\n    openHistoryAndExample,\n} from './db';\nimport { examples } from './examples';\n\n/**\n * Loads a single history item for the main palette viewer\n */\nexport async function loadItemFromDB(\n    timestamp: number,\n): Promise<PaletteEntry | null> {\n    if (timestamp < 10) {\n        const { store } = await openExample('readonly');\n        const info = await store.get(timestamp);\n        const hidden = info != null ? info.hidden : false;\n        return hidden ? null : examples[timestamp] || null;\n    } else {\n        const { store } = await openHistory('readonly');\n        const item = await store.get(timestamp);\n        return processEntry(item);\n    }\n}\n\nexport async function openFirstItem(): Promise<PaletteEntry | null> {\n    const { history, example } = await openHistoryAndExample('readonly');\n    const historyItems = await history.getAll(undefined, 1);\n    if (historyItems.length > 0) {\n        return processEntry(historyItems[0]);\n    }\n\n    const hiddenExamples = new Set(\n        (await example.getAll())\n            .filter(item => item.hidden)\n            .map(item => item.id),\n    );\n    const visibleExample = Object.values(examples).find(\n        example => !hiddenExamples.has(example.timestamp),\n    );\n    return visibleExample || null;\n}\n\n/**\n * Delete a history item with the given timestamp\n */\nexport async function deleteItemFromDB(timestamp: number) {\n    if (timestamp < 10) {\n        const { store, complete } = await openExample('readwrite');\n        store.put({ id: timestamp, hidden: true });\n        await complete;\n    } else {\n        const { store, complete } = await openHistory('readwrite');\n        store.delete(timestamp);\n        await complete;\n    }\n}\n","import { PaletteEntry } from '../entry';\nimport { revokeIfObjectUrl } from '../revoke-object-url';\nimport { blobToDataUri } from './data-uri';\nimport { openHistory, openExample, processEntry, HistoryEntry } from './db';\n\n/**\n * Load the history list.\n * @param callback Called on each iteration.\n */\nexport async function loadHistoryFromDB(\n    callback: (entry: PaletteEntry) => void,\n) {\n    const { store, complete } = await openHistory('readonly');\n\n    store.iterateCursor(cursor => {\n        if (!cursor) return;\n        callback(processEntry(cursor.value));\n        cursor.continue();\n    });\n    await complete;\n}\n\nexport async function hideExamples(callback: (id: number) => void) {\n    const { store, complete } = await openExample('readonly');\n\n    store.iterateCursor(cursor => {\n        if (!cursor) return;\n        if (cursor.value.hidden) {\n            callback(cursor.key as number);\n        }\n        cursor.continue();\n    });\n    await complete;\n}\n\n/**\n * Save items to the database.\n * Items may have object URLs as `imgSrc` properties, and will be processed\n * into data URIs.\n */\nexport async function saveItemsToDB(\n    items: PaletteEntry[],\n): Promise<HistoryEntry[]> {\n    // Need to process entries first due to IDB restrictions\n    const entries = await Promise.all(\n        items.map(async item => {\n            const res = await fetch(item.imgSrc);\n            const blob = await res.blob();\n            const dataUri = await blobToDataUri(blob);\n            revokeIfObjectUrl(item.imgSrc);\n            return {\n                id: item.timestamp,\n                imgSrc: dataUri,\n                colors: item.colors,\n            };\n        }),\n    );\n\n    const { store, complete } = await openHistory('readwrite');\n    entries.forEach(entry => store.put(entry));\n    await complete;\n\n    return entries;\n}\n","/**\n * Revoke a url if it is an object url.\n */\nexport function revokeIfObjectUrl(url: string) {\n    if (new URL(url).protocol === 'blob:') {\n        URL.revokeObjectURL(url);\n    }\n}\n\n/**\n * When used as an `onload` listener for an image, this function will\n * revoke the image's source object url if it is an object url.\n */\nexport function revokeObjectUrlOnLoad(evt: Event) {\n    const img = evt.target as HTMLImageElement;\n    revokeIfObjectUrl(img.src);\n}\n","import { PaletteEntry } from '../entry';\nimport { UiAction } from '../page/handle-message';\nimport { processEntry, HistoryEntry } from './db';\nimport { deleteItemFromDB, loadItemFromDB, openFirstItem } from './display';\nimport { loadHistoryFromDB, saveItemsToDB, hideExamples } from './history';\n\ninterface SaveAction {\n    type: 'SAVE';\n    payload: PaletteEntry[];\n}\n\ninterface LoadAction {\n    type: 'LOAD';\n    payload: null;\n}\n\ninterface OpenAction {\n    type: 'OPEN';\n    payload: number;\n}\n\ninterface DeleteAction {\n    type: 'DELETE';\n    payload: {\n        timestamp: number;\n        current: boolean;\n    };\n}\n\nexport type WorkerAction = SaveAction | LoadAction | OpenAction | DeleteAction;\ntype ProcessEntry = (entry: HistoryEntry) => PaletteEntry;\n\nexport async function handleMessage(\n    action: WorkerAction,\n    postMessage: (msg: UiAction) => void,\n) {\n    console.log(action.type, action.payload);\n    try {\n        switch (action.type) {\n            case 'SAVE':\n                postMessage({ type: 'ERROR', payload: 'Hello World!' });\n                if (action.payload.length > 0) {\n                    const entries = await saveItemsToDB(action.payload);\n                    postMessage({\n                        type: 'DISPLAY',\n                        payload: processEntry(entries[0]),\n                    });\n                    postMessage({\n                        type: 'ADD',\n                        payload: entries.map(processEntry as ProcessEntry),\n                    });\n                }\n                return;\n            case 'LOAD':\n                const hideExamplesPromise = hideExamples(id =>\n                    postMessage({ type: 'REMOVE', payload: [id] }),\n                );\n                const loadHistoryPromise = loadHistoryFromDB(entry =>\n                    postMessage({ type: 'ADD', payload: [entry] }),\n                );\n                await Promise.all([hideExamplesPromise, loadHistoryPromise]);\n                return;\n            case 'OPEN':\n                if (!Number.isNaN(action.payload)) {\n                    const entry = await loadItemFromDB(action.payload);\n                    if (entry != null) {\n                        postMessage({ type: 'DISPLAY', payload: entry });\n                    }\n                }\n                return;\n            case 'DELETE':\n                if (!Number.isNaN(action.payload.timestamp)) {\n                    await deleteItemFromDB(action.payload.timestamp);\n                    postMessage({\n                        type: 'REMOVE',\n                        payload: [action.payload.timestamp],\n                    });\n                    if (action.payload.current) {\n                        const otherEntry = await openFirstItem();\n                        postMessage({ type: 'DISPLAY', payload: otherEntry });\n                    }\n                }\n                return;\n        }\n    } catch (err) {\n        postMessage({ type: 'ERROR', payload: String(err) });\n    }\n}\n","import { handleMessage } from './handle-message';\n\nconst postMessage = ((self as any) as DedicatedWorkerGlobalScope).postMessage;\n\nself.addEventListener('message', evt => handleMessage(evt.data, postMessage));\nhandleMessage({ type: 'LOAD', payload: null }, postMessage);\n"],"names":["promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","open","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","require$$0","dbPromise","idb","upgradeDB","keyPath","async","mode","tx","openHistory","openExample","processEntry","entry","imgBlob","dataUri","header","data","split","mimeType","byteString","atob","buffer","ArrayBuffer","intBuffer","Uint8Array","i","charCodeAt","Blob","type","dataUriToBlob","imgSrc","timestamp","id","URL","createObjectURL","colors","white","black","examples","1","vibrant","color","textColor","darkVibrant","lightVibrant","muted","darkMuted","lightMuted","2","3","openFirstItem","history","example","openHistoryAndExample","historyItems","hiddenExamples","Set","filter","item","hidden","map","values","find","has","saveItemsToDB","entries","all","res","fetch","blob","reader","FileReader","onload","readAsDataURL","blobToDataUri","url","protocol","revokeObjectURL","revokeIfObjectUrl","put","handleMessage","action","postMessage","console","log","payload","hideExamplesPromise","key","hideExamples","loadHistoryPromise","loadHistoryFromDB","Number","isNaN","info","loadItemFromDB","deleteItemFromDB","current","otherEntry","err","String","self","addEventListener","evt"],"mappings":"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"}