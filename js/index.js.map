{"version":3,"file":"index.js","sources":["../../src/revoke-object-url.ts","../../src/page/clipboard.ts","../../src/page/render-color-text.ts","../../src/page/render-swatch.ts","../../src/page/render-palette.ts","../../src/page/render-image.ts","../../src/page/list.ts","../../src/page/main-palette.ts","../../src/page/handle-message.ts","../../src/page/process-images.ts","../../src/page/index.ts"],"sourcesContent":["/**\n * Revoke a url if it is an object url.\n */\nexport function revokeIfObjectUrl(url: string) {\n    if (new URL(url).protocol === 'blob:') {\n        URL.revokeObjectURL(url);\n    }\n}\n\n/**\n * When used as an `onload` listener for an image, this function will\n * revoke the image's source object url if it is an object url.\n */\nexport function revokeObjectUrlOnLoad(evt: Event) {\n    const img = evt.target as HTMLImageElement;\n    revokeIfObjectUrl(img.src);\n}\n","declare global {\n    interface Navigator {\n        clipboard: Clipboard;\n    }\n\n    interface Clipboard {\n        writeText(newClipText: string): Promise<void>;\n    }\n}\n\nconst ClipboardModule = navigator.clipboard || import('./clipboard-polyfill');\n\n/**\n * Copies the color text displayed in a swatch.\n * @throws If user denies copy permission or copying fails\n */\nexport async function copySwatchText(event: Event) {\n    const btn = (event.target as Element).closest('button.swatch');\n    const span = btn != null ? btn.querySelector('.swatch-text') : null;\n    const textContent = span != null ? span.textContent : null;\n\n    if (textContent) {\n        const clipboard = await ClipboardModule;\n        await clipboard.writeText(textContent);\n    }\n}\n","type Vec3 = [number, number, number];\nexport type ColorTextType = 'HEX' | 'RGB' | 'HSL';\n\ninterface ColorTextProps {\n    colorTextType: ColorTextType;\n    hexColor: string;\n}\n\n// Helpers from Vibrant.Util\nfunction hexToRgb(hex: string): Vec3 | null {\n    let m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    return m === null\n        ? null\n        : ([m[1], m[2], m[3]].map(s => parseInt(s, 16)) as Vec3);\n}\nfunction rgbToHsl(r: number, g: number, b: number): Vec3 {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let max = Math.max(r, g, b);\n    let min = Math.min(r, g, b);\n    let h: number;\n    let s: number;\n    let l = (max + min) / 2;\n    if (max === min) {\n        h = s = 0;\n    } else {\n        let d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                throw new Error();\n        }\n\n        h /= 6;\n    }\n    return [h, s, l];\n}\n\n/**\n * Renders the text representing a color. Formats based on the given color\n * text type.\n */\nexport function renderColorText(props: ColorTextProps) {\n    switch (props.colorTextType) {\n        case 'RGB':\n        case 'HSL':\n            const rgb = hexToRgb(props.hexColor);\n            if (rgb == null) {\n                return props.hexColor;\n            }\n            const [r, g, b] = rgb;\n            if (props.colorTextType === 'RGB') {\n                return `R${r} G${g} B${b}`;\n            }\n            const [h, s, l] = rgbToHsl(r, g, b).map(n => Math.round(n * 100));\n            return `H${h} S${s} L${l}`;\n        case 'HEX':\n        default:\n            return props.hexColor;\n    }\n}\n","import { ColorSwatch } from '../color-interfaces';\nimport { ColorTextType, renderColorText } from './render-color-text';\n\ninterface SwatchProps {\n    color: ColorSwatch | null | undefined;\n    colorTextType: ColorTextType | null;\n}\n\n/**\n * Renders a swatch: the element that displays a color for the user to look at.\n */\nexport function renderSwatch(props: SwatchProps, target: HTMLElement) {\n    const isVisible = props.color != null;\n    const isTextSwatch = props.colorTextType != null;\n    target.hidden = !isVisible;\n    if (isVisible) {\n        const { textColor, color: backgroundColor } = props.color!;\n\n        target.style.backgroundColor = backgroundColor;\n        if (isTextSwatch) {\n            target.style.color = textColor;\n            target.querySelector('.swatch-text')!.textContent = renderColorText(\n                {\n                    colorTextType: props.colorTextType!,\n                    hexColor: backgroundColor,\n                },\n            );\n        }\n    }\n}\n","import { ColorTextType } from './render-color-text';\nimport { ColorPalette } from '../color-interfaces';\nimport { renderSwatch } from './render-swatch';\n\ninterface PaletteProps {\n    colors: ColorPalette | null;\n    colorTextType: ColorTextType | null;\n}\n\nconst colorClasses: Record<keyof ColorPalette, string> = Object.freeze({\n    vibrant: 'vibrant',\n    darkVibrant: 'dark-vibrant',\n    lightVibrant: 'light-vibrant',\n    muted: 'muted',\n    darkMuted: 'dark-muted',\n    lightMuted: 'light-muted',\n});\n\n/**\n * Renders a palette - the associated colors of an image.\n */\nexport function renderPalette(props: PaletteProps, target: ParentNode) {\n    for (const [propName, className] of Object.entries(colorClasses)) {\n        const swatchTarget = target.querySelector<HTMLElement>(\n            `.swatch.${className}`,\n        )!;\n        renderSwatch(\n            {\n                colorTextType: props.colorTextType,\n                color:\n                    props.colors != null\n                        ? props.colors[propName as keyof ColorPalette]\n                        : null,\n            },\n            swatchTarget,\n        );\n    }\n}\n","interface ImageProps {\n    imgSrc: string;\n    name: string;\n}\n\n/**\n * Renders an image for palette.\n */\nexport function renderImage(props: ImageProps, target: HTMLImageElement) {\n    target.src = props.imgSrc;\n    target.alt = props.name;\n}\n","import { PaletteEntry } from '../entry';\nimport { revokeObjectUrlOnLoad } from '../revoke-object-url';\nimport { renderPalette } from './render-palette';\nimport { renderImage } from './render-image';\n\ninterface AddPalettesProps {\n    readonly items: PaletteEntry[];\n}\n\nconst LIST_ELEMENT = document.getElementById('grid-items')!;\nconst LIST_ITEM_TEMPLATE = document.getElementById(\n    'grid-item-template',\n) as HTMLTemplateElement;\n\nexport function addPalettesToList(props: AddPalettesProps) {\n    const fragment = document.createDocumentFragment();\n    for (const child of props.items) {\n        const template = document.importNode(LIST_ITEM_TEMPLATE.content, true);\n        renderImage(\n            child,\n            template.querySelector<HTMLImageElement>('img.preview')!,\n        );\n        renderPalette({ ...child, colorTextType: null }, template);\n\n        const link = template.querySelector('a')!;\n        link.id = child.timestamp.toString();\n        link.href = `#${child.timestamp}`;\n\n        template\n            .querySelector('img')!\n            .addEventListener('load', revokeObjectUrlOnLoad);\n\n        fragment.appendChild(template);\n    }\n    LIST_ELEMENT.appendChild(fragment);\n}\n\ninterface RemovePalettesProps {\n    readonly timestamps: number[];\n}\n\nexport function deletePalettesFromList(props: RemovePalettesProps) {\n    props.timestamps.forEach(timestamp => {\n        const link = document.getElementById(timestamp.toString());\n        const li = link != null ? link.parentElement : null;\n        if (li != null) {\n            LIST_ELEMENT.removeChild(li);\n        }\n    });\n}\n","import { PaletteEntry } from '../entry';\nimport { ColorTextType } from './render-color-text';\nimport { renderImage } from './render-image';\nimport { renderPalette } from './render-palette';\n\ninterface DisplayMainPaletteProps {\n    /** Data to display on the main palette */\n    data: PaletteEntry | null;\n    /**\n     * True if this image was loaded when the document loaded.\n     * Changes back button behavior so that it doesn't navigate away\n     * from the page accidentally.\n     */\n    firstLoad: boolean;\n    /**\n     * True if the page URL should be updated with this image's ID.\n     * Unnecessary if a link was clicked to open this image.\n     */\n    updateHash: boolean;\n}\n\nconst MAIN_PALETTE_ELEMENT = document.getElementById('palette')!;\nconst MAIN_PALETTE_IMAGE = MAIN_PALETTE_ELEMENT.querySelector<HTMLImageElement>(\n    'img.preview',\n)!;\nconst COLOR_DISPLAY_SELECT = document.getElementById(\n    'color-display',\n) as HTMLSelectElement;\nconst BACK_BUTTON = document.getElementById('back')!;\nconst TITLE = 'Color Breakdown';\n\nfunction closeMainPalette() {\n    MAIN_PALETTE_ELEMENT.classList.remove('is-open'); // Close on mobile\n\n    // Update history\n    history.replaceState(false, TITLE, '.');\n    document.title = TITLE;\n}\n\n/** Stores current select change listener so it can be replaced later */\nlet listener: (() => void) | null = null;\n\nexport function displayMainPalette(props: DisplayMainPaletteProps) {\n    if (listener) {\n        COLOR_DISPLAY_SELECT.removeEventListener('change', listener);\n    }\n\n    if (props.firstLoad) {\n        BACK_BUTTON.dataset.firstload = 'firstload';\n    } else {\n        delete BACK_BUTTON.dataset.firstload;\n    }\n\n    if (props.data != null) {\n        function render() {\n            renderPalette(\n                {\n                    ...props.data!,\n                    colorTextType: COLOR_DISPLAY_SELECT.value as ColorTextType,\n                },\n                MAIN_PALETTE_ELEMENT,\n            );\n        }\n        render();\n        renderImage(props.data, MAIN_PALETTE_IMAGE); // Only render image first time\n        COLOR_DISPLAY_SELECT.addEventListener('change', render);\n        listener = render;\n\n        MAIN_PALETTE_ELEMENT.classList.add('is-open'); // Open on mobile\n        const title = `${props.data.name} | ${TITLE}`;\n        document.title = title;\n\n        if (props.updateHash) {\n            history.replaceState(true, title, `#${props.data.timestamp}`);\n        }\n    } else {\n        renderPalette(\n            {\n                colors: null,\n                colorTextType: COLOR_DISPLAY_SELECT.value as ColorTextType,\n            },\n            MAIN_PALETTE_ELEMENT,\n        );\n        renderImage(\n            { imgSrc: 'img/placeholder.svg', name: 'No image' },\n            MAIN_PALETTE_IMAGE,\n        );\n        listener = null;\n        closeMainPalette();\n    }\n}\n\nexport function handleBackButton() {\n    if (!BACK_BUTTON.dataset.firstload) {\n        history.back();\n    }\n    closeMainPalette();\n}\n","import { PaletteEntry } from '../entry';\nimport { addPalettesToList, deletePalettesFromList } from './list';\nimport { displayMainPalette } from './main-palette';\n\ninterface AddAction {\n    type: 'ADD';\n    payload: PaletteEntry[];\n}\n\ninterface RemoveAction {\n    type: 'REMOVE';\n    payload: number[];\n}\n\ninterface DisplayAction {\n    type: 'DISPLAY';\n    payload: {\n        entry: PaletteEntry | null;\n        firstLoad: boolean;\n        updateHash: boolean;\n    };\n}\n\ninterface ErrorAction {\n    type: 'ERROR';\n    payload: string;\n}\n\nexport type UiAction = AddAction | RemoveAction | DisplayAction | ErrorAction;\n\nexport function handleMessage(action: UiAction) {\n    console.log(action.type, action.payload);\n    switch (action.type) {\n        case 'ADD':\n            addPalettesToList({ items: action.payload });\n            return;\n        case 'REMOVE':\n            deletePalettesFromList({ timestamps: action.payload });\n            return;\n        case 'DISPLAY':\n            displayMainPalette({\n                data: action.payload.entry,\n                firstLoad: action.payload.firstLoad,\n                updateHash: action.payload.updateHash,\n            });\n            return;\n        case 'ERROR':\n            console.error(action.payload);\n            return;\n    }\n}\n","import { ColorPalette, ColorSwatch } from '../color-interfaces';\nimport { PaletteEntry } from '../entry';\n\nconst VibrantModule = import('node-vibrant');\n\n/**\n * Generate a palette from the given image source.\n */\nexport async function dataFromImageUrl({\n    name,\n    url,\n}: {\n    name: string;\n    url: string;\n}): Promise<PaletteEntry> {\n    const { default: Vibrant } = await VibrantModule;\n    const palette = await Vibrant.from(url).getPalette();\n\n    // This isn't exported directly by node-vibrant, so pull it out here.\n    type Swatch = (typeof palette)['Muted'];\n    function toSwatch(vibrantSwatch: Swatch): ColorSwatch | null {\n        if (!vibrantSwatch) return null;\n        return {\n            color: vibrantSwatch.getHex(),\n            textColor: vibrantSwatch.getBodyTextColor(),\n        };\n    }\n\n    const timestamp = Date.now();\n    const colors: ColorPalette = {\n        vibrant: toSwatch(palette.Vibrant),\n        darkVibrant: toSwatch(palette.DarkVibrant),\n        lightVibrant: toSwatch(palette.LightVibrant),\n        muted: toSwatch(palette.Muted),\n        darkMuted: toSwatch(palette.DarkMuted),\n        lightMuted: toSwatch(palette.LightMuted),\n    };\n\n    return { timestamp, colors, imgSrc: url, name };\n}\n\n/**\n * Generate a palette entry for each file in the FileList.\n * Filters the files to only include images, then creates an object URL for\n * each and uses node-vibrant to process them.\n */\nexport function paletteFromImages(files: FileList | null) {\n    const imageUrls = Array.from(files || [])\n        .filter(file => file.type.match(/^image\\//) != null)\n        .map(file => ({ name: file.name, url: URL.createObjectURL(file) }));\n\n    return Promise.all(imageUrls.map(dataFromImageUrl));\n}\n","import { WorkerAction } from '../db-worker/handle-message';\nimport { revokeObjectUrlOnLoad } from '../revoke-object-url';\nimport { copySwatchText } from './clipboard';\nimport { handleMessage } from './handle-message';\nimport { paletteFromImages } from './process-images';\nimport { handleBackButton } from './main-palette';\n\nconst dbWorker = new Worker('js/db-worker.js');\nfunction postMessage(action: WorkerAction) {\n    dbWorker.postMessage(action);\n}\n\nconst form = document.getElementById('new-palette-entry') as HTMLFormElement;\nconst fileInput = form.elements.namedItem('imagefile') as HTMLInputElement;\nasync function saveImages() {\n    const entries = await paletteFromImages(fileInput.files);\n    postMessage({ type: 'SAVE', payload: entries });\n}\n\n// Handle change of hash (which opens a new image).\n// Deals with manually setting URL and clicking on history links.\nloadFromHash(true);\nwindow.addEventListener('hashchange', () => loadFromHash(false));\nfunction loadFromHash(firstLoad: boolean) {\n    const timestamp = parseInt(location.hash.slice(1), 10);\n    postMessage({ type: 'OPEN', payload: { timestamp, firstLoad } });\n}\n\n// Handle messages from DB worker\ndbWorker.addEventListener('message', evt => handleMessage(evt.data));\n\n// Revoke object URLs on the main palette image on load\ndocument\n    .querySelector<HTMLImageElement>('.palette-image')!\n    .addEventListener('load', revokeObjectUrlOnLoad);\n\n// Close palette when back is clicked\ndocument\n    .getElementById('back')!\n    .addEventListener('click', handleBackButton, { passive: true });\n\n// Delete current palette when delete is clicked\ndocument.getElementById('delete')!.addEventListener(\n    'click',\n    () => {\n        const timestamp = parseInt(location.hash.slice(1), 10);\n        postMessage({ type: 'DELETE', payload: { timestamp, current: true } });\n    },\n    { passive: true },\n);\n\n// Copy the text of a swatch on click\ndocument\n    .querySelector('.palette-colors')!\n    .addEventListener('click', copySwatchText, { passive: true });\n\n// Save images when the add button is used.\nform.addEventListener('submit', evt => {\n    evt.preventDefault();\n    saveImages();\n});\nfileInput.addEventListener('change', saveImages, { passive: true });\n\n// File input focus polyfill for Firefox\nfileInput.addEventListener('focus', () => fileInput.classList.add('focus'), {\n    passive: true,\n});\nfileInput.addEventListener('blur', () => fileInput.classList.remove('focus'), {\n    passive: true,\n});\n"],"names":["revokeIfObjectUrl","url","URL","protocol","revokeObjectURL","revokeObjectUrlOnLoad","evt","target","src","ClipboardModule","navigator","clipboard","import","async","copySwatchText","event","btn","closest","span","querySelector","textContent","writeText","hexToRgb","hex","m","exec","map","s","parseInt","rgbToHsl","r","g","b","h","max","Math","min","l","d","Error","renderColorText","props","colorTextType","rgb","hexColor","n","round","renderSwatch","isVisible","color","isTextSwatch","hidden","textColor","backgroundColor","style","colorClasses","Object","freeze","vibrant","darkVibrant","lightVibrant","muted","darkMuted","lightMuted","renderPalette","propName","className","entries","swatchTarget","colors","renderImage","imgSrc","alt","name","LIST_ELEMENT","document","getElementById","LIST_ITEM_TEMPLATE","addPalettesToList","fragment","createDocumentFragment","child","items","template","importNode","content","link","id","timestamp","toString","href","addEventListener","appendChild","deletePalettesFromList","timestamps","forEach","li","parentElement","removeChild","MAIN_PALETTE_ELEMENT","MAIN_PALETTE_IMAGE","COLOR_DISPLAY_SELECT","BACK_BUTTON","TITLE","closeMainPalette","classList","remove","history","replaceState","title","listener","displayMainPalette","removeEventListener","firstLoad","dataset","firstload","data","render","value","add","updateHash","handleBackButton","back","handleMessage","action","console","log","type","payload","entry","error","VibrantModule","dataFromImageUrl","default","Vibrant","palette","from","getPalette","toSwatch","vibrantSwatch","getHex","getBodyTextColor","Date","now","DarkVibrant","LightVibrant","Muted","DarkMuted","LightMuted","paletteFromImages","files","imageUrls","Array","filter","file","match","createObjectURL","Promise","all","dbWorker","Worker","postMessage","form","fileInput","elements","namedItem","saveImages","loadFromHash","location","hash","slice","window","passive","current","preventDefault"],"mappings":"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"}