{"version":3,"file":"index.js","sources":["../../src/revoke-object-url.ts","../../src/page/clipboard.ts","../../src/page/render-color-text.ts","../../src/page/render-swatch.ts","../../src/page/render-palette.ts","../../src/page/render-image.ts","../../src/page/list.ts","../../src/page/main-palette.ts","../../src/page/handle-message.ts","../../src/page/process-images.ts","../../src/page/index.ts"],"sourcesContent":["/**\n * Revoke a url if it is an object url.\n */\nexport function revokeIfObjectUrl(url: string) {\n    if (new URL(url).protocol === 'blob:') {\n        URL.revokeObjectURL(url);\n    }\n}\n\n/**\n * When used as an `onload` listener for an image, this function will\n * revoke the image's source object url if it is an object url.\n */\nexport function revokeObjectUrlOnLoad(evt: Event) {\n    const img = evt.target as HTMLImageElement;\n    revokeIfObjectUrl(img.src);\n}\n","declare global {\n    interface Navigator {\n        clipboard: Clipboard;\n    }\n\n    interface Clipboard {\n        writeText(newClipText: string): Promise<void>;\n    }\n}\n\nconst ClipboardModule = navigator.clipboard || import('./clipboard-polyfill');\n\n/**\n * Copies the color text displayed in a swatch.\n * @throws If user denies copy permission or copying fails\n */\nexport async function copySwatchText(event: Event) {\n    const btn = (event.target as Element).closest('button.swatch');\n    const span = btn != null ? btn.querySelector('.swatch-text') : null;\n    const textContent = span != null ? span.textContent : null;\n\n    if (textContent) {\n        const clipboard = await ClipboardModule;\n        await clipboard.writeText(textContent);\n    }\n}\n","type Vec3 = [number, number, number];\nexport type ColorTextType = 'HEX' | 'RGB' | 'HSL';\n\ninterface ColorTextProps {\n    colorTextType: ColorTextType;\n    hexColor: string;\n}\n\n// Helpers from Vibrant.Util\nfunction hexToRgb(hex: string): Vec3 | null {\n    let m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    return m === null\n        ? null\n        : ([m[1], m[2], m[3]].map(s => parseInt(s, 16)) as Vec3);\n}\nfunction rgbToHsl(r: number, g: number, b: number): Vec3 {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let max = Math.max(r, g, b);\n    let min = Math.min(r, g, b);\n    let h: number;\n    let s: number;\n    let l = (max + min) / 2;\n    if (max === min) {\n        h = s = 0;\n    } else {\n        let d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                throw new Error();\n        }\n\n        h /= 6;\n    }\n    return [h, s, l];\n}\n\n/**\n * Renders the text representing a color. Formats based on the given color\n * text type.\n */\nexport function renderColorText(props: ColorTextProps) {\n    switch (props.colorTextType) {\n        case 'RGB':\n        case 'HSL':\n            const rgb = hexToRgb(props.hexColor);\n            if (rgb == null) {\n                return props.hexColor;\n            }\n            const [r, g, b] = rgb;\n            if (props.colorTextType === 'RGB') {\n                return `R${r} G${g} B${b}`;\n            }\n            const [h, s, l] = rgbToHsl(r, g, b).map(n => Math.round(n * 100));\n            return `H${h} S${s} L${l}`;\n        case 'HEX':\n        default:\n            return props.hexColor;\n    }\n}\n","import { ColorSwatch } from '../color-interfaces';\nimport { ColorTextType, renderColorText } from './render-color-text';\n\ninterface SwatchProps {\n    color: ColorSwatch | null | undefined;\n    colorTextType: ColorTextType | null;\n}\n\n/**\n * Renders a swatch: the element that displays a color for the user to look at.\n */\nexport function renderSwatch(props: SwatchProps, target: HTMLElement) {\n    const isVisible = props.color != null;\n    const isTextSwatch = props.colorTextType != null;\n    target.hidden = !isVisible;\n    if (isVisible) {\n        const { textColor, color: backgroundColor } = props.color!;\n\n        target.style.backgroundColor = backgroundColor;\n        if (isTextSwatch) {\n            target.style.color = textColor;\n            target.querySelector('.swatch-text')!.textContent = renderColorText(\n                {\n                    colorTextType: props.colorTextType!,\n                    hexColor: backgroundColor,\n                },\n            );\n        }\n    }\n}\n","import { ColorTextType } from './render-color-text';\nimport { ColorPalette } from '../color-interfaces';\nimport { renderSwatch } from './render-swatch';\n\ninterface PaletteProps {\n    colors: ColorPalette | null;\n    colorTextType: ColorTextType | null;\n}\n\nconst colorClasses: Record<keyof ColorPalette, string> = Object.freeze({\n    vibrant: 'vibrant',\n    darkVibrant: 'dark-vibrant',\n    lightVibrant: 'light-vibrant',\n    muted: 'muted',\n    darkMuted: 'dark-muted',\n    lightMuted: 'light-muted',\n});\n\n/**\n * Renders a palette - the associated colors of an image.\n */\nexport function renderPalette(props: PaletteProps, target: ParentNode) {\n    for (const [propName, className] of Object.entries(colorClasses)) {\n        const swatchTarget = target.querySelector<HTMLElement>(\n            `.swatch.${className}`,\n        )!;\n        renderSwatch(\n            {\n                colorTextType: props.colorTextType,\n                color:\n                    props.colors != null\n                        ? props.colors[propName as keyof ColorPalette]\n                        : null,\n            },\n            swatchTarget,\n        );\n    }\n}\n","interface ImageProps {\n    imgSrc: string;\n    name: string;\n}\n\n/**\n * Renders an image for palette.\n */\nexport function renderImage(props: ImageProps, target: HTMLImageElement) {\n    target.src = props.imgSrc;\n    target.alt = props.name;\n}\n","import { PaletteEntry } from '../entry';\nimport { revokeObjectUrlOnLoad } from '../revoke-object-url';\nimport { renderPalette } from './render-palette';\nimport { renderImage } from './render-image';\n\ninterface AddPalettesProps {\n    readonly items: PaletteEntry[];\n}\n\nconst LIST_ELEMENT = document.getElementById('grid-items')!;\nconst LIST_ITEM_TEMPLATE = document.getElementById(\n    'grid-item-template',\n) as HTMLTemplateElement;\n\nexport function addPalettesToList(props: AddPalettesProps) {\n    const fragment = document.createDocumentFragment();\n    for (const child of props.items) {\n        const template = document.importNode(LIST_ITEM_TEMPLATE.content, true);\n        renderImage(\n            child,\n            template.querySelector<HTMLImageElement>('img.preview')!,\n        );\n        renderPalette({ ...child, colorTextType: null }, template);\n\n        const link = template.querySelector('a')!;\n        link.id = child.timestamp.toString();\n        link.href = `#${child.timestamp}`;\n\n        template\n            .querySelector('img')!\n            .addEventListener('load', revokeObjectUrlOnLoad);\n\n        fragment.appendChild(template);\n    }\n    LIST_ELEMENT.appendChild(fragment);\n}\n\ninterface RemovePalettesProps {\n    readonly timestamps: number[];\n}\n\nexport function deletePalettesFromList(props: RemovePalettesProps) {\n    props.timestamps.forEach(timestamp => {\n        const link = document.getElementById(timestamp.toString());\n        const li = link != null ? link.parentElement : null;\n        if (li != null) {\n            LIST_ELEMENT.removeChild(li);\n        }\n    });\n}\n","import { PaletteEntry } from '../entry';\nimport { ColorTextType } from './render-color-text';\nimport { renderImage } from './render-image';\nimport { renderPalette } from './render-palette';\n\ninterface DisplayMainPaletteProps {\n    /** Data to display on the main palette */\n    data: PaletteEntry | null;\n    /**\n     * True if this image was loaded when the document loaded.\n     * Changes back button behavior so that it doesn't navigate away\n     * from the page accidentally.\n     */\n    firstLoad: boolean;\n    /**\n     * True if the page URL should be updated with this image's ID.\n     * Unnecessary if a link was clicked to open this image.\n     */\n    updateHash: boolean;\n}\n\nconst MAIN_PALETTE_ELEMENT = document.getElementById('palette')!;\nconst MAIN_PALETTE_IMAGE = MAIN_PALETTE_ELEMENT.querySelector<HTMLImageElement>(\n    'img.preview',\n)!;\nconst COLOR_DISPLAY_SELECT = document.getElementById(\n    'color-display',\n) as HTMLSelectElement;\nconst BACK_BUTTON = document.getElementById('back')!;\nconst TITLE = 'Color Breakdown';\n\nfunction closeMainPalette() {\n    MAIN_PALETTE_ELEMENT.classList.remove('is-open'); // Close on mobile\n\n    // Update history\n    history.replaceState(false, TITLE, '.');\n    document.title = TITLE;\n}\n\n/** Stores current select change listener so it can be replaced later */\nlet listener: (() => void) | null = null;\n\nexport function displayMainPalette(props: DisplayMainPaletteProps) {\n    if (listener) {\n        COLOR_DISPLAY_SELECT.removeEventListener('change', listener);\n    }\n\n    if (props.firstLoad) {\n        BACK_BUTTON.dataset.firstload = 'firstload';\n    } else {\n        delete BACK_BUTTON.dataset.firstload;\n    }\n\n    if (props.data != null) {\n        function render() {\n            renderPalette(\n                {\n                    ...props.data!,\n                    colorTextType: COLOR_DISPLAY_SELECT.value as ColorTextType,\n                },\n                MAIN_PALETTE_ELEMENT,\n            );\n        }\n        render();\n        renderImage(props.data, MAIN_PALETTE_IMAGE); // Only render image first time\n        COLOR_DISPLAY_SELECT.addEventListener('change', render);\n        listener = render;\n\n        MAIN_PALETTE_ELEMENT.classList.add('is-open'); // Open on mobile\n        const title = `${props.data.name} | ${TITLE}`;\n        document.title = title;\n\n        if (props.updateHash) {\n            history.replaceState(true, title, `#${props.data.timestamp}`);\n        }\n    } else {\n        renderPalette(\n            {\n                colors: null,\n                colorTextType: COLOR_DISPLAY_SELECT.value as ColorTextType,\n            },\n            MAIN_PALETTE_ELEMENT,\n        );\n        renderImage(\n            { imgSrc: 'img/placeholder.svg', name: 'No image' },\n            MAIN_PALETTE_IMAGE,\n        );\n        listener = null;\n        closeMainPalette();\n    }\n}\n\nexport function handleBackButton() {\n    if (!BACK_BUTTON.dataset.firstload) {\n        history.back();\n    }\n    closeMainPalette();\n}\n","import { PaletteEntry } from '../entry';\nimport { addPalettesToList, deletePalettesFromList } from './list';\nimport { displayMainPalette } from './main-palette';\n\ninterface AddAction {\n    type: 'ADD';\n    payload: PaletteEntry[];\n}\n\ninterface RemoveAction {\n    type: 'REMOVE';\n    payload: number[];\n}\n\ninterface DisplayAction {\n    type: 'DISPLAY';\n    payload: {\n        entry: PaletteEntry | null;\n        firstLoad: boolean;\n        updateHash: boolean;\n    };\n}\n\ninterface ErrorAction {\n    type: 'ERROR';\n    payload: string;\n}\n\nexport type UiAction = AddAction | RemoveAction | DisplayAction | ErrorAction;\n\nexport function handleMessage(action: UiAction) {\n    console.log(action.type, action.payload);\n    switch (action.type) {\n        case 'ADD':\n            addPalettesToList({ items: action.payload });\n            return;\n        case 'REMOVE':\n            deletePalettesFromList({ timestamps: action.payload });\n            return;\n        case 'DISPLAY':\n            displayMainPalette({\n                data: action.payload.entry,\n                firstLoad: action.payload.firstLoad,\n                updateHash: action.payload.updateHash,\n            });\n            return;\n        case 'ERROR':\n            console.error(action.payload);\n            return;\n    }\n}\n","import { ColorPalette, ColorSwatch } from '../color-interfaces';\nimport { PaletteEntry } from '../entry';\n\nconst VibrantModule = import('node-vibrant');\n\n/**\n * Generate a palette from the given image source.\n */\nexport async function dataFromImageUrl({\n    name,\n    url,\n}: {\n    name: string;\n    url: string;\n}): Promise<PaletteEntry> {\n    const { default: Vibrant } = await VibrantModule;\n    const palette = await Vibrant.from(url).getPalette();\n\n    // This isn't exported directly by node-vibrant, so pull it out here.\n    type Swatch = (typeof palette)['Muted'];\n    function toSwatch(vibrantSwatch: Swatch): ColorSwatch | null {\n        if (!vibrantSwatch) return null;\n        return {\n            color: vibrantSwatch.getHex(),\n            textColor: vibrantSwatch.getBodyTextColor(),\n        };\n    }\n\n    const timestamp = Date.now();\n    const colors: ColorPalette = {\n        vibrant: toSwatch(palette.Vibrant),\n        darkVibrant: toSwatch(palette.DarkVibrant),\n        lightVibrant: toSwatch(palette.LightVibrant),\n        muted: toSwatch(palette.Muted),\n        darkMuted: toSwatch(palette.DarkMuted),\n        lightMuted: toSwatch(palette.LightMuted),\n    };\n\n    return { timestamp, colors, imgSrc: url, name };\n}\n\n/**\n * Generate a palette entry for each file in the FileList.\n * Filters the files to only include images, then creates an object URL for\n * each and uses node-vibrant to process them.\n */\nexport function paletteFromImages(files: FileList | null) {\n    const imageUrls = Array.from(files || [])\n        .filter(file => file.type.match(/^image\\//) != null)\n        .map(file => ({ name: file.name, url: URL.createObjectURL(file) }));\n\n    return Promise.all(imageUrls.map(dataFromImageUrl));\n}\n","import { WorkerAction } from '../db-worker/handle-message';\nimport { revokeObjectUrlOnLoad } from '../revoke-object-url';\nimport { copySwatchText } from './clipboard';\nimport { handleMessage } from './handle-message';\nimport { paletteFromImages } from './process-images';\nimport { handleBackButton } from './main-palette';\n\nconst dbWorker = new Worker('js/db-worker.js');\nfunction postMessage(action: WorkerAction) {\n    dbWorker.postMessage(action);\n}\n\nconst form = document.getElementById('new-palette-entry') as HTMLFormElement;\nconst fileInput = form.elements.namedItem('imagefile') as HTMLInputElement;\nasync function saveImages() {\n    const entries = await paletteFromImages(fileInput.files);\n    postMessage({ type: 'SAVE', payload: entries });\n}\n\n// Handle change of hash (which opens a new image).\n// Deals with manually setting URL and clicking on history links.\nloadFromHash(true);\nwindow.addEventListener('hashchange', () => loadFromHash(false));\nfunction loadFromHash(firstLoad: boolean) {\n    const timestamp = parseInt(location.hash.slice(1), 10);\n    postMessage({ type: 'OPEN', payload: { timestamp, firstLoad } });\n}\n\n// Handle messages from DB worker\ndbWorker.addEventListener('message', evt => handleMessage(evt.data));\n\n// Revoke object URLs on the main palette image on load\ndocument\n    .querySelector<HTMLImageElement>('.palette-image')!\n    .addEventListener('load', revokeObjectUrlOnLoad);\n\n// Close palette when back is clicked\ndocument\n    .getElementById('back')!\n    .addEventListener('click', handleBackButton, { passive: true });\n\n// Delete current palette when delete is clicked\ndocument.getElementById('delete')!.addEventListener(\n    'click',\n    () => {\n        const timestamp = parseInt(location.hash.slice(1), 10);\n        postMessage({ type: 'DELETE', payload: { timestamp, current: true } });\n    },\n    { passive: true },\n);\n\n// Copy the text of a swatch on click\ndocument\n    .querySelector('.palette-colors')!\n    .addEventListener('click', copySwatchText, { passive: true });\n\n// Save images when the add button is used.\nform.addEventListener('submit', evt => {\n    evt.preventDefault();\n    saveImages();\n});\nfileInput.addEventListener('change', saveImages, { passive: true });\n\n// File input focus polyfill for Firefox\nfileInput.addEventListener('focus', () => fileInput.classList.add('focus'), {\n    passive: true,\n});\nfileInput.addEventListener('blur', () => fileInput.classList.remove('focus'), {\n    passive: true,\n});\n"],"names":["revokeObjectUrlOnLoad","evt","img","target","url","src","URL","protocol","revokeObjectURL","ClipboardModule","navigator","clipboard","import","renderColorText","props","colorTextType","rgb","hex","m","exec","map","s","parseInt","hexToRgb","hexColor","r","g","b","h","l","max","Math","min","d","Error","rgbToHsl","n","round","renderSwatch","isVisible","color","isTextSwatch","hidden","textColor","backgroundColor","style","querySelector","textContent","colorClasses","Object","freeze","vibrant","darkVibrant","lightVibrant","muted","darkMuted","lightMuted","renderPalette","propName","className","entries","swatchTarget","colors","renderImage","imgSrc","alt","name","LIST_ELEMENT","document","getElementById","LIST_ITEM_TEMPLATE","MAIN_PALETTE_ELEMENT","MAIN_PALETTE_IMAGE","COLOR_DISPLAY_SELECT","BACK_BUTTON","TITLE","closeMainPalette","classList","remove","history","replaceState","title","listener","handleMessage","action","console","log","type","payload","fragment","createDocumentFragment","child","items","template","importNode","content","link","id","timestamp","toString","href","addEventListener","appendChild","addPalettesToList","timestamps","forEach","li","parentElement","removeChild","removeEventListener","firstLoad","dataset","firstload","data","render","value","add","updateHash","displayMainPalette","entry","error","VibrantModule","async","dataFromImageUrl","default","Vibrant","palette","from","getPalette","toSwatch","vibrantSwatch","getHex","getBodyTextColor","Date","now","DarkVibrant","LightVibrant","Muted","DarkMuted","LightMuted","dbWorker","Worker","postMessage","form","fileInput","elements","namedItem","saveImages","files","imageUrls","Array","filter","file","match","createObjectURL","Promise","all","paletteFromImages","loadFromHash","location","hash","slice","window","back","passive","current","event","btn","closest","span","writeText","preventDefault"],"mappings":"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"}